---
- name: Install packages for BeeGFS object storage server
  package:
    name: beegfs-storage
    state: "{{ beegfs_package_action }}"
  become: true
  notify: Restart BeeGFS storage service

- name: Store variable in updatable var
  set_fact:
    oss: "{{ oss_item }}"

- name: Set default oss port
  set_fact:
    oss: "{{ oss | combine({'port_tcp': '8003'}) }}"
  when: oss.port_tcp is not defined

- name: Set default oss config path
  set_fact:
    oss: "{{ oss | combine({'config_path': '/etc/beegfs/' + (oss.port_tcp | string) + '.d/beegfs-storage.conf'}) }}"
  when: oss.config_path is not defined

- name: Set default oss directory storage
  set_fact:
    oss: "{{ oss | combine({'directory': beegfs_oss_path_prefix + oss.dev }) }}"
  when: oss.directory is not defined

- name: Store num_id
  set_fact:
    oss: "{{ oss | combine({'num_id': (beegfs_node_num_id | int) * (beegfs_target_id_multiplier | int) + (oss_index + 1) }) }}"
  when: beegfs_node_num_id is defined

- name: Create a list of devices that are mounted
  set_fact:
    mounted_devs: "{{ ansible_mounts | map(attribute='device') | list }}"

- name: Create storage config dirs
  file:
    path: "/etc/beegfs/{{ oss.port_tcp }}.d/"
    state: directory
  become: true
  notify: Restart BeeGFS storage service

- name: Prepare storage devices
  block:
    - name: Stat the OSS device
      stat:
        path: "{{ oss.dev }}"
      register: oss_dev_stat
    - name: Fail if OSS device does not exist
      fail:
        msg: OSS device {{ oss.dev }} does not exist
      when: not oss_dev_stat.stat.exists
    - name: Unmount storage device if beegfs_force_format is true
      mount:
        path: "{{ oss.directory }}"
        state: unmounted
      when: beegfs_force_format | bool
      notify: Restart BeeGFS storage service
    - name: Attempt to format if the device is not mounted or if beegfs_force_format is true
      vars:
        oss_dev_real: "{{ oss_dev_stat.stat.lnk_source if oss_dev_stat.stat.islnk else oss_dev_stat.stat.path }}"
      filesystem:
        dev: "{{ oss.dev }}"
        fstype: "{{ beegfs_fstype }}"
        force: "{{ beegfs_force_format | bool }}"
        opts: "{{ beegfs_filesystem_opts }}"
      when: (oss_dev_real not in mounted_devs) or (beegfs_force_format | bool)
      notify: Restart BeeGFS storage service
    - name: Ensure the mount point exists
      file:
        path: "{{ oss.directory }}"
        state: directory
    - name: Mount filesystem, fail if the fstype doesn't match
      mount:
        src: "{{ oss.dev }}"
        path: "{{ oss.directory }}"
        fstype: "{{ beegfs_fstype }}"
        state: mounted
        opts: "{{ beegfs_mount_opts }}"
      notify: Restart BeeGFS storage service
    - name: fetch new UUIDs
      setup:
        gather_subset: hardware

  become: true
  when: oss_dev_is_defined

- name: "Copy {{ oss.port_tcp }}.d/beegfs-storage.conf"
  template:
    src: "beegfs-storage.conf.j2"
    dest: "/etc/beegfs/{{ oss.port_tcp }}.d/beegfs-storage.conf"
  become: true
  notify: Restart BeeGFS storage service

- name: Run storage service setup script
  command: |
    /opt/beegfs/sbin/beegfs-setup-storage -f \
    -p {{ oss.directory }} {{ oss_replace }} \
    -m {{ oss.mgmtd_host }} \
    -c /etc/beegfs/{{ oss.port_tcp }}.d/beegfs-storage.conf -C \
    {% if 'node_num_id' in oss %}{{ '-s ' + (oss.node_num_id | string) }} \{% endif %}
    {% if 'num_id' in oss %}{{ '-i ' + (oss.num_id | string) }}{% endif %}
  args:
    creates: "{{ oss.directory }}/originalNodeID"
  become: true
  notify: Restart BeeGFS storage service
...
